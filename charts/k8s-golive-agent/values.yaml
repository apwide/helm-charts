# Default values for k8s-golive-agent.

replicaCount: 1

image:
  repository: apwide/k8s-golive-agent
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: "latest"
  args: []

imagePullSecrets:
#  - name: docker-secret
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: true
  deploymentAccess: true
  statefulSetAccess: true

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

golive:
  auth:
    # username/password for Golive Server auth
    username: ""
    password: ""
    # token for Golive cloud auth
    token: ""

    # existingSecret containing Golive auth
    existingSecret: ""
    # tokenKey is the key in the secret containing Golive cloud auth token
    tokenKey: ""
    # usernameKey is the key in the secret containing Golive server username
    usernameKey: ""
    # usernameKey is the key in the secret containing Golive server password
    passwordKey: ""

  config:
    golive:
      ####################################################################################
      ## Do not disable offline mode before having configured correctly your listeners !!!
      ## To avoid noise of data into Golive, first, restrict what you want to push
      ####################################################################################
      offline: true
      # url to cnfigure Golive API base url on your Jira instance when using Golive Server:
      #   https://[jiraBaseUrl]:[jiraPort]/[jiraContextPath]/rest/apwide/tem/1.1
      # url: https://golive.apwide.net/api

    # statusMapping maps K8S pod status to Golive Status
    # Golive statuses can be defined by id and/or by name
    # When no statusMapping is configured, pod statuses are not tracked.
    statusMapping:
      down:
        # id:
        # name:
      up:
      deploy:
      failed:

    # listeners array of listener which specify what to track and how to extract and send information to Golive
    # more configuration examples on: https://apwide.github.io/helm-charts/charts/k8s-golive-agent/examples/
    listeners:
      - id: all
      # Simple example
#      - id: simple-listener
#        autoCreate: true
#        category:
#          name: "{{ nsName }}"
#        selectors:
#          - namespace: default
#            labels:
#              my.company.com/monitoring: "k8s-golive-agent"
#          - namespace: default
#            labelQuery: "my.company.com/app in (eCommerce, Payment, CRM)"

      # Complex example
#      - id: complex-listener
#        autoCreate: true
#        category:
#          name: '{{ nsAnnotation "my.company.com/env" }}'
#        application:
#          name: '{{ label "my.company.com/app" | title }}'
#        environment:
#          name: '{{ jsonPath ".spec.template.spec.containers[0].name" }} - {{ label "app" }} ({{ Cat.Name }})'
#        selectors:
#          - namespace: default
#            labelQuery: "my.company.com/app in (ERP),app in (Backend)"




